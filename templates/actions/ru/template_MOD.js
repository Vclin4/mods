module.exports = {
  // ---------------------------------------------------------------------
  // Имя действия
  //
  // Это имя действия, отображаемого в редакторе.
  // ---------------------------------------------------------------------

  name: 'Имя действия в окне поиска.',

  // ---------------------------------------------------------------------
  // Секция действий
  //
  // Это раздел, в котором будет происходить действие.
  // ---------------------------------------------------------------------

  section: 'Категория, к которой относится действие.',

  // ---------------------------------------------------------------------
  // Подзаголовок к действию
  //
  // Эта функция генерирует субтитр, отображаемый рядом с именем.
  // ---------------------------------------------------------------------

  subtitle: function (data) {
    // Каждый элемент соответствует каждому утверждению переключателя (switch).
    // const info = ['Item 1', 'Item 2', 'Item 3'] - не обязательно, вы можете оставить return с текстом.
    const info = ['Item 1', 'Item 2', 'Item 3']
    // Что видит пользователь при предварительном просмотре окна действий внизу.
    return `What I'm doing: ${info[data.info]}`
  },

  // ---------------------------------------------------------------------
  // Действие Функции хранения
  //
  // Хранит соответствующую информацию о переменных для редактора.
  // Не явояется обязательной.
  // ---------------------------------------------------------------------

  variableStorage: function (data, varType) {
    const type = parseInt(data.storage)
    if (type !== varType) return
    const dataType = 'Number'
    return ([data.varName, dataType])
  },

  // ---------------------------------------------------------------------
  // Поля действий
  //
  // Это поля для действия. Эти поля настраиваются путем создания элементов 
  // с соответствующими идентификаторами в HTML.
  // Также эти имена полей, хранящихся в JSON- данных действия.
  // ---------------------------------------------------------------------

  fields: ['FirstTextBox', 'info', 'storage', 'varName'],

  // ---------------------------------------------------------------------
  // HTML Интферйса.
  //
  // Эта функция возвращает строку, содержащую HTML, используемый для
  // редактирования действий.
  //
  // Параметр "isEvent" будет истинным, если это действие используется
  // для события. В силу своей природы события не содержат определенной информации,
  // поэтому отредактируйте HTML, чтобы отразить это.
  //
  // Параметр "data" хранит константы с элементами для использования.
  // Каждый из них представляет собой массив: индекс 0 для команд, индекс 1 для событий.
  // Имена: sendTargets, members, roles, channels,
  // messages, servers, variables.
  // ---------------------------------------------------------------------

  html: function (isEvent, data) {
    return `
<div style="width: 90%;">
  Variable or String:<br>
  <input id="VariableTextBox" class="round" type="text">
</div><br>
<div style="padding-top: 8px; width: 60%;">
  Options:
  <select id="info" class="round">
    <option value="0" selected>Option 1</option>
    <option value="1">Option 2</option>
    <option value="2">Option 3</option>
    <option value="3">Option 4</option>
  </select>
</div><br>
<div style="padding-top: 8px;">
  <div style="float: left; width: 35%;">
    Store In:<br>
    <select id="storage" class="round">
      ${data.variables[1]}
    </select>
  </div>
  <div id="varNameContainer" style="float: right; width: 60%;">
    Variable Name:<br>
    <input id="varName" class="round" type="text">
  </div>
</div>`
  },

  // ---------------------------------------------------------------------
  // Начальный код редактора действий
  //
  // Когда HTML впервые применяется к редактору действий, этот код
  // также запускается. Это помогает добавить модификации или настроить реакционные
  // функции для элементов DOM, проще говоря работа с HTML.
  // ---------------------------------------------------------------------

  init: function () {},

  // ---------------------------------------------------------------------
  // Функция бота действия
  //
  // Это функция для действия в классе Action бота.
  // Помните, что вызовы событий не будут иметь доступа к параметру "msg",
  // поэтому не забудьте предусмотреть проверку на существование переменной.
  // ---------------------------------------------------------------------

  action: function (cache) {
    const data = cache.actions[cache.index]
    const storage = parseInt(data.storage)
    const varName = this.evalMessage(data.varName, cache)
    const info = parseInt(data.info)

    let result = 5
    switch (info) {
      case 0:
        result = 0
        break
      case 1:
        result = 1
        break
      case 2:
        result = 2
        break
      case 3:
        result = 3
        break
      case 4:
        result = 4
        break
    }

    this.storeValue(result, storage, varName, cache)
    this.callNextAction(cache)
  },

  // ---------------------------------------------------------------------
  // Действие Мода для бота
  //
  // При инициализации бота запускается этот код. Используя пространство имен бота
  // пространство имен DBM, при необходимости можно добавить/изменить существующие функции.
  // Для того, чтобы избежать конфликтов между модами, не забудьте присвоить псевдоним
  // функции, которые вы хотите перезаписать.
  // ---------------------------------------------------------------------

  mod: function (DBM) {}
}
